scalar Void

type User {
  _id: String
  name: String
  password: String
  phone: String
  email: String
}
type AuthData {
  token: String!
  user: User!
}

fragment UserFields on User {
  _id
  name
  password
  phone
  email
}

query getUsers {
  users {
    ...UserFields
  }
}

mutation Register(
  $name: String!
  $email: String!
  $password: String!
  $phone: String!
) {
  register(name: $name, email: $email, password: $password, phone: $phone) {
    ...UserFields
  }
}

mutation Login($email: String!, $password: String!) {
  login(email: $email, password: $password) {
    token
    user {
      ...UserFields
    }
  }
}

type Query {
  users: [User!]!
}

type Mutation {
  register(
    name: String!
    email: String!
    password: String!
    phone: String!
  ): User
  login(email: String!, password: String!): AuthData
  confirmCode(email: String!, code: String!): Void
  resendCode(email: String!): Void
  resetPassword(email: String!): Void
  forgotPassword(password: String!, resetToken: String!): Void
}
